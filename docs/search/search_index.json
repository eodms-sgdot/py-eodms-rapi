{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EODMS RAPI Client Introduction EODMS RAPI Client is a Python3 package used to access the REST API service provided by the Earth Observation Data Management System (EODMS) from Natural Resources Canada. This package requires Python 3.6 or higher (it was designed using Python 3.7). Installation The package is installed using the pip command pip install pg-eodms-rapi The installation will also add the following packages: dateparser Requests tqdm geomet The package does not require the installation of the GDAL package. However, GDAL has to be installed if you wish to use ESRI Shapefiles. Initializing the EODMSRAPI The EODMSRAPI class is the object which contains the methods and functions used to access the EODMS REST API service. >>> from eodms_rapi import EODMSRAPI Initialization of the EODMSRAPI requires entry of a password from a valid EODMS account. NOTE : If you do not have an EODMS account, please visit https://www.eodms-sgdot.nrcan-rncan.gc.ca/index-en.html and click the Register (Required to Order) link under Account . >>> rapi = EODMSRAPI('eodms-username', 'eodms-password') Example Code An example to search, order and download RCM images: from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Set a polygon of geographic centre of Canada using GeoJSON feat = [('INTERSECTS', {\"type\":\"Polygon\", \"coordinates\":[[[-95.47,61.4],\\ [-97.47,61.4],[-97.47,63.4],[-95.47,63.4],[-95.47,61.4]]]})] # Set date ranges dates = [{\"start\": \"20190101_000000\", \"end\": \"20210621_000000\"}] # Set search filters filters = {'Beam Mode Type': ('LIKE', ['%50m%']), 'Polarization': ('=', 'HH HV'), 'Incidence Angle': ('>=', 17)} # Set the results fields result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION'] # Submit search rapi.search(\"RCMImageProducts\", filters, feat, dates, result_fields, 2) # Get results rapi.set_fieldConvention('upper') res = rapi.get_results('full') # Now order the images order_res = rapi.order(res) # Download images to a specific destination dest = \"C:\\\\TEMP\" dn_res = rapi.download(order_res, dest) # Print results rapi.print_results(dn_res) Usage Submit an Image Search Order Images Download Images Examples Support If you have any issues or questions, please contact the EODMS Support Team at nrcan.eodms-sgdot.rncan@canada.ca .","title":"Home"},{"location":"#eodms-rapi-client","text":"","title":"EODMS RAPI Client"},{"location":"#introduction","text":"EODMS RAPI Client is a Python3 package used to access the REST API service provided by the Earth Observation Data Management System (EODMS) from Natural Resources Canada. This package requires Python 3.6 or higher (it was designed using Python 3.7).","title":"Introduction"},{"location":"#installation","text":"The package is installed using the pip command pip install pg-eodms-rapi The installation will also add the following packages: dateparser Requests tqdm geomet The package does not require the installation of the GDAL package. However, GDAL has to be installed if you wish to use ESRI Shapefiles.","title":"Installation"},{"location":"#initializing-the-eodmsrapi","text":"The EODMSRAPI class is the object which contains the methods and functions used to access the EODMS REST API service. >>> from eodms_rapi import EODMSRAPI Initialization of the EODMSRAPI requires entry of a password from a valid EODMS account. NOTE : If you do not have an EODMS account, please visit https://www.eodms-sgdot.nrcan-rncan.gc.ca/index-en.html and click the Register (Required to Order) link under Account . >>> rapi = EODMSRAPI('eodms-username', 'eodms-password')","title":"Initializing the EODMSRAPI"},{"location":"#example-code","text":"An example to search, order and download RCM images: from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Set a polygon of geographic centre of Canada using GeoJSON feat = [('INTERSECTS', {\"type\":\"Polygon\", \"coordinates\":[[[-95.47,61.4],\\ [-97.47,61.4],[-97.47,63.4],[-95.47,63.4],[-95.47,61.4]]]})] # Set date ranges dates = [{\"start\": \"20190101_000000\", \"end\": \"20210621_000000\"}] # Set search filters filters = {'Beam Mode Type': ('LIKE', ['%50m%']), 'Polarization': ('=', 'HH HV'), 'Incidence Angle': ('>=', 17)} # Set the results fields result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION'] # Submit search rapi.search(\"RCMImageProducts\", filters, feat, dates, result_fields, 2) # Get results rapi.set_fieldConvention('upper') res = rapi.get_results('full') # Now order the images order_res = rapi.order(res) # Download images to a specific destination dest = \"C:\\\\TEMP\" dn_res = rapi.download(order_res, dest) # Print results rapi.print_results(dn_res)","title":"Example Code"},{"location":"#usage","text":"Submit an Image Search Order Images Download Images Examples","title":"Usage"},{"location":"#support","text":"If you have any issues or questions, please contact the EODMS Support Team at nrcan.eodms-sgdot.rncan@canada.ca .","title":"Support"},{"location":"download/","text":"Download Images The download method of the EODMSRAPI requires: Either the order results from the order method or a list of Order Item IDs . A local destination path where the images will be downloaded. dest = \"C:\\\\TEMP\" dn_res = rapi.download(order_res, dest)","title":"Download Images"},{"location":"download/#download-images","text":"The download method of the EODMSRAPI requires: Either the order results from the order method or a list of Order Item IDs . A local destination path where the images will be downloaded. dest = \"C:\\\\TEMP\" dn_res = rapi.download(order_res, dest)","title":"Download Images"},{"location":"examples/","text":"Examples Search, Order and Download from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Set a polygon of geographic centre of Canada using GeoJSON feat = [('INTERSECTS', {\"type\":\"Polygon\", \"coordinates\":[[[-95.47,61.4],\\ [-97.47,61.4],[-97.47,63.4],[-95.47,63.4],[-95.47,61.4]]]})] # Set date ranges dates = [{\"start\": \"20190101_000000\", \"end\": \"20210621_000000\"}] # Set search filters filters = {'Beam Mode Type': ('LIKE', ['%50m%']), 'Polarization': ('=', 'HH HV'), 'Incidence Angle': ('>=', 17)} # Set the results fields result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION'] # Submit search rapi.search(\"RCMImageProducts\", filters, feat, dates, result_fields, 2) # Get results rapi.set_fieldConvention('upper') res = rapi.get_results('full') # Now order the images order_res = rapi.order(res) # Download images to a specific destination dest = \"C:\\\\TEMP\" dn_res = rapi.download(order_res, dest) # Print results rapi.print_results(dn_res) Get Available Order Parameters for an Image from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using EODMS account credentials rapi = EODMSRAPI('username', 'password') # Get the order parameters for RCM image with Record ID 7627902 param_res = rapi.get_orderParameters('RCMImageProducts', '7627902') # Print the parameters print(\"param_res: %s\" % param_res) Cancel an Existing Order Item from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Cancel the order item with Order ID 48188 and Order Item ID 289377 delete_res = rapi.cancel_orderItem('48188', '289377') Get a List of Available Fields for a Collection from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Get the available field information for RCMImageProducts collection fields = rapi.get_availableFields('RCMImageProducts') print(fields) >>> {'search': {'Special Handling Required': {'id': 'RCM.SPECIAL_HANDLING_REQUIRED', 'datatype': 'String'}, ...}, 'results': {'Buyer Id': {'id': 'ARCHIVE_IMAGE.AGENCY_BUYER', 'datatype': 'Integer'}, ...} } # Get a list of available field IDs for RCMImageProducts collection field_ids = rapi.get_availableFields('RCMImageProducts', name_type='id') print(field_ids) >>> {'search': ['RCM.SPECIAL_HANDLING_REQUIRED', 'ARCHIVE_IMAGE.CLIENT_ORDER_NUMBER', ...], 'results': ['ARCHIVE_IMAGE.AGENCY_BUYER', 'ARCHIVE_IMAGE.ARCH_VISIBILITY_START', ...] } # Get a list of available field names used to submit searches (rapi.search()) field_titles = rapi.get_availableFields('RCMImageProducts', name_type='title') print(field_titles) >>> {'search': ['Special Handling Required', 'Client Order Number', 'Order Key', ...], 'results': ['Buyer Id', 'Archive Visibility Start Date', 'Client Order Item Number', ...] }","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#search-order-and-download","text":"from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Set a polygon of geographic centre of Canada using GeoJSON feat = [('INTERSECTS', {\"type\":\"Polygon\", \"coordinates\":[[[-95.47,61.4],\\ [-97.47,61.4],[-97.47,63.4],[-95.47,63.4],[-95.47,61.4]]]})] # Set date ranges dates = [{\"start\": \"20190101_000000\", \"end\": \"20210621_000000\"}] # Set search filters filters = {'Beam Mode Type': ('LIKE', ['%50m%']), 'Polarization': ('=', 'HH HV'), 'Incidence Angle': ('>=', 17)} # Set the results fields result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION'] # Submit search rapi.search(\"RCMImageProducts\", filters, feat, dates, result_fields, 2) # Get results rapi.set_fieldConvention('upper') res = rapi.get_results('full') # Now order the images order_res = rapi.order(res) # Download images to a specific destination dest = \"C:\\\\TEMP\" dn_res = rapi.download(order_res, dest) # Print results rapi.print_results(dn_res)","title":"Search, Order and Download"},{"location":"examples/#get-available-order-parameters-for-an-image","text":"from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using EODMS account credentials rapi = EODMSRAPI('username', 'password') # Get the order parameters for RCM image with Record ID 7627902 param_res = rapi.get_orderParameters('RCMImageProducts', '7627902') # Print the parameters print(\"param_res: %s\" % param_res)","title":"Get Available Order Parameters for an Image"},{"location":"examples/#cancel-an-existing-order-item","text":"from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Cancel the order item with Order ID 48188 and Order Item ID 289377 delete_res = rapi.cancel_orderItem('48188', '289377')","title":"Cancel an Existing Order Item"},{"location":"examples/#get-a-list-of-available-fields-for-a-collection","text":"from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Get the available field information for RCMImageProducts collection fields = rapi.get_availableFields('RCMImageProducts') print(fields) >>> {'search': {'Special Handling Required': {'id': 'RCM.SPECIAL_HANDLING_REQUIRED', 'datatype': 'String'}, ...}, 'results': {'Buyer Id': {'id': 'ARCHIVE_IMAGE.AGENCY_BUYER', 'datatype': 'Integer'}, ...} } # Get a list of available field IDs for RCMImageProducts collection field_ids = rapi.get_availableFields('RCMImageProducts', name_type='id') print(field_ids) >>> {'search': ['RCM.SPECIAL_HANDLING_REQUIRED', 'ARCHIVE_IMAGE.CLIENT_ORDER_NUMBER', ...], 'results': ['ARCHIVE_IMAGE.AGENCY_BUYER', 'ARCHIVE_IMAGE.ARCH_VISIBILITY_START', ...] } # Get a list of available field names used to submit searches (rapi.search()) field_titles = rapi.get_availableFields('RCMImageProducts', name_type='title') print(field_titles) >>> {'search': ['Special Handling Required', 'Client Order Number', 'Order Key', ...], 'results': ['Buyer Id', 'Archive Visibility Start Date', 'Client Order Item Number', ...] }","title":"Get a List of Available Fields for a Collection"},{"location":"order/","text":"Order Images To order images using the RAPI, a POST request is submitted containing the following JSON (as an example): { \"destinations\": [], \"items\": [ { \"collectionId\": \"RCMImageProducts\", \"recordId\": \"7822244\", \"parameters\": [ { \"packagingFormat\": \"TAR\" }, { \"NOTIFICATION_EMAIL_ADDRESS\": \"example@email.com\" } ] } ] } So, ordering images using the EODMSRAPI requires a list of results (items) and optional priority , parameters and destinations values. Results The results parameter can be a list of results returned from a search session or a list of items. The results is required. Each item must have: recordId collectionId Priority The priority can be a single string entry (\"Low\", \"Medium\", \"High\", or \"Urgent\") which will be applied to all images or a list of dictionaries containing recordId and priority value for each individual image. The priority is optional and the default is \"Medium\". Parameters The parameters can be a list of parameter dictionaries which will be applied to all images or a list of dictionaries containing the recordId and parameters . Each item in the parameters list should be the same as how it appears in the POST request (ex: {\"packagingFormat\": \"TAR\"} ) You can get a list of available parameters by calling the get_orderParameters method of the EODMSRAPI, submitting arguments collection and recordId . The parameters is optional. Destinations The destinations is a list of destination dictionaries containing a set of items. There are 2 types of destinations, \"FTP\" and \"Physical\". The \"FTP\" dictionary would look something like this: { \"type\": \"FTP\", \"name\": \"FTP Name\", \"hostname\": \"ftp://ftpsite.com\", \"username\": \"username\", \"password\": \"password\", \"stringValue\": \"ftp://username@ftpsite.com/downloads\", \"path\": \"downloads\", \"canEdit\": \"false\" } The \"Physical\" dictionary would look like this: { \"type\": \"Physical\", \"name\": \"Destination Name\", \"customerName\": \"John Doe\", \"contactEmail\": \"example@email.com\", \"organization\": \"Organization Name\", \"phone\": \"555-555-5555\", \"addr1\": \"123 Fake Street\", \"addr2\": \"Optional\", \"addr3\": \"Optional\", \"city\": \"Ottawa\", \"stateProv\": \"Ontario\", \"country\": \"Canada\", \"postalCode\": \"A1A 1A1\", \"classification\": \"Optional\" } For more information on the destination items, visit Directly Accessing the EODMS REST API . Example Here's an example of how to submit an order to the EODMSRAPI using the previous search session: params = [{\"packagingFormat\": \"TAR\"}] order_res = rapi.order(res, priority=\"low\", parameters=params)","title":"Order Images"},{"location":"order/#order-images","text":"To order images using the RAPI, a POST request is submitted containing the following JSON (as an example): { \"destinations\": [], \"items\": [ { \"collectionId\": \"RCMImageProducts\", \"recordId\": \"7822244\", \"parameters\": [ { \"packagingFormat\": \"TAR\" }, { \"NOTIFICATION_EMAIL_ADDRESS\": \"example@email.com\" } ] } ] } So, ordering images using the EODMSRAPI requires a list of results (items) and optional priority , parameters and destinations values.","title":"Order Images"},{"location":"order/#results","text":"The results parameter can be a list of results returned from a search session or a list of items. The results is required. Each item must have: recordId collectionId","title":"Results"},{"location":"order/#priority","text":"The priority can be a single string entry (\"Low\", \"Medium\", \"High\", or \"Urgent\") which will be applied to all images or a list of dictionaries containing recordId and priority value for each individual image. The priority is optional and the default is \"Medium\".","title":"Priority"},{"location":"order/#parameters","text":"The parameters can be a list of parameter dictionaries which will be applied to all images or a list of dictionaries containing the recordId and parameters . Each item in the parameters list should be the same as how it appears in the POST request (ex: {\"packagingFormat\": \"TAR\"} ) You can get a list of available parameters by calling the get_orderParameters method of the EODMSRAPI, submitting arguments collection and recordId . The parameters is optional.","title":"Parameters"},{"location":"order/#destinations","text":"The destinations is a list of destination dictionaries containing a set of items. There are 2 types of destinations, \"FTP\" and \"Physical\". The \"FTP\" dictionary would look something like this: { \"type\": \"FTP\", \"name\": \"FTP Name\", \"hostname\": \"ftp://ftpsite.com\", \"username\": \"username\", \"password\": \"password\", \"stringValue\": \"ftp://username@ftpsite.com/downloads\", \"path\": \"downloads\", \"canEdit\": \"false\" } The \"Physical\" dictionary would look like this: { \"type\": \"Physical\", \"name\": \"Destination Name\", \"customerName\": \"John Doe\", \"contactEmail\": \"example@email.com\", \"organization\": \"Organization Name\", \"phone\": \"555-555-5555\", \"addr1\": \"123 Fake Street\", \"addr2\": \"Optional\", \"addr3\": \"Optional\", \"city\": \"Ottawa\", \"stateProv\": \"Ontario\", \"country\": \"Canada\", \"postalCode\": \"A1A 1A1\", \"classification\": \"Optional\" } For more information on the destination items, visit Directly Accessing the EODMS REST API .","title":"Destinations"},{"location":"order/#example","text":"Here's an example of how to submit an order to the EODMSRAPI using the previous search session: params = [{\"packagingFormat\": \"TAR\"}] order_res = rapi.order(res, priority=\"low\", parameters=params)","title":"Example"},{"location":"search-rapi/","text":"Submit an Image Search You can perform a search on the RAPI using the search method of the EODMSRAPI. However, before submitting a search, you'll have to create the items used to filter the results. The search function requires a Collection name and optional filters , geometry features , dates , result fields and maximum results values. Collection The Collection ID has to be specified when submitting a search. To get a list of Collection IDs, use: >>> print(rapi.get_collections(as_list=True)) | EODMSRAPI | Getting Collection information, please wait... ['NAPL', 'SGBAirPhotos', 'RCMImageProducts', 'COSMO-SkyMed1', 'Radarsat1', 'Radarsat1RawProducts', 'Radarsat2', 'Radarsat2RawProducts', 'RCMScienceData', 'TerraSarX', 'DMC', 'Gaofen-1', 'GeoEye-1', 'IKONOS', 'IRS', 'PlanetScope', 'QuickBird-2', 'RapidEye', 'SPOT', 'WorldView-1', 'WorldView-2', 'WorldView-3', 'VASP'] Geometry Features The geometry features are a list of tuples with each tuple containing an operator and a specified geometry ( [(<operator>, <geometry>), ...] ). The operator can be contains , contained by , crosses , disjoint with , intersects , overlaps , touches , and within NOTE: The operator is not case sensitive. However, the geometry value(s) should follow the proper formatting and cases for their type (i.e. follow the proper formatting for GeoJSON, WKT, etc.). The geometry can be: Type Info Example A filename can be a ESRI Shapefile, KML, GML or GeoJSON can contain points, lines or polygons and have multiple features feats = [ ('contains', 'C:\\\\TEMP\\\\test.geojson') ] WKT format can be a point, line or polygon feats = [ ('intersects', 'POINT (-75.92790414335645721 45.63414106580390239)'), ('intersects', 'POINT (-76.04462125987681986 46.23234274318053849)') ] GeoJSON the 'geometry' entry from a GeoJSON Feature can be a point, line or polygon feats = [ ('within', { \"type\":\"Polygon\", \"coordinates\":[[[-75.71484393257714,45.407703298380106], [-75.6962772564671,45.40738537380734],[-75.69343667852566,45.39264326981817], [-75.71826085966613,45.390764097853655],[-75.71484393257714,45.407703298380106]]] }) ] Coordinates a list of coordinates of a polygon (ex: [(x1, y1), (x2, y2), ...] ) a single point (ex: [(x1, y1)] ) feats = [ ('contains', [ (-75.71, 45.41), (-75.70, 45.41), (-75.69, 45.39), (-75.72, 45.39), (-75.71, 45.41) ] ) ] NOTE : The GDAL Python package is required if you wish to use shapefiles. WKT example to get results for the easternmost and westernmost points of Canada: >>> feats = [('intersects', 'POINT (-141.001944 60.306389)'), ('intersects', 'POINT (-52.619444 47.523611)')] Date Range(s) The date range is a list of date range dictionaries containing a start and end key. The date values should be in format YYYYMMDD_HHMMSS . For example, to search for images between January 1, 2019 at midnight to September 15, 2019 at 3:35:55 PM and between October 13, 2020 at 12 noon to November 13, 2020 at 3pm, use: >>> dates = [{\"start\": \"20190101_000000\", \"end\": \"20190915_153555\"}, {\"start\": \"20201013_120000\", \"end\": \"20201113_150000\"}] Query Filter(s) The query variable is a dictionary containing filter titles as keys and tuples with the operator and filter value such as: {<field>: (<operator>, <value(s)>), ...} Example of beam mnemonic filter: {'Beam Mnemonic': ('like', ['16M%', '3M11'])} The operator can be one of the following: = , < , > , <> , <= , >= , like , starts with , ends with , or contains . NOTE: The operator is not case sensitive. However, fields and values are case sensitive. The following example will search for images with Beam Mnemonic that equals '3M11' or contains '16M' and with Incidence Angle greater than or equal to 45 degrees: >>> filters = {'Beam Mnemonic': ('like', 'SC50%'), 'Incidence Angle': ('<=', '45')} Get Available Fields You can get a list of available query fields using the get_availableFields and passing the Collection ID . There are 3 ways to get the available fields for a Collection using the name_type argument of the get_availableFields function: Value Description Results empty Gets the raw field information from the RAPI. print(rapi.get_availableFields('RCMImageProducts')) {'search': { 'Special Handling Required': {'id': 'RCM.SPECIAL_HANDLING_REQUIRED', 'datatype': 'String'}, 'Client Order Number': {'id': 'ARCHIVE_IMAGE.CLIENT_ORDER_NUMBER', 'datatype': 'String'}, ...} }, 'results': { 'Buyer Id': {'id': 'ARCHIVE_IMAGE.AGENCY_BUYER', 'datatype': 'Integer'}, 'Archive Visibility Start Date': {'id': 'ARCHIVE_IMAGE.ARCH_VISIBILITY_START', 'datatype': 'Date'}, ...} } } id Gets a list of field IDs. print(rapi.get_availableFields('RCMImageProducts', name_type='id')) {'search': [ 'RCM.SPECIAL_HANDLING_REQUIRED', 'ARCHIVE_IMAGE.CLIENT_ORDER_NUMBER', ...], 'results': [ 'ARCHIVE_IMAGE.AGENCY_BUYER', 'ARCHIVE_IMAGE.ARCH_VISIBILITY_START', ...] } title Gets a list of field names (these are used when performing a search using the EODMSRAPI). print(rapi.get_availableFields('RCMImageProducts', name_type='title')) {'search': [ 'Special Handling Required', 'Client Order Number', ...], 'results': [ 'Buyer Id', 'Archive Visibility Start Date', ...] } Get Available Field Choices Some fields have specific choices that the user can enter. These values are included in the get_availableFields empty results, however the function get_fieldChoices in the EODMSRAPI offers results easier to manipulate. The get_fieldChoices function requires a Collection ID and an optional field name or ID. If no field is specified, all fields and choices for the specified Collection will be returned. Example of choices for the Polarization field in RCM: >>> rapi.get_fieldChoices('RCMImageProducts', 'Polarization') ['CH CV', 'HH', 'HH HV', 'HH HV VH VV', 'HH VV', 'HV', 'VH', 'VH VV', 'VV'] Result Fields The next value to set is the result fields . The raw JSON results from the RAPI returns only a select few fields. For example, when searching RCM images, the RAPI only returns metadata for these Field IDs: RCM.ORBIT_REL ARCHIVE_IMAGE.PROCESSING_DATETIME ARCHIVE_IMAGE.PRODUCT_TYPE IDX_SENSOR.SENSOR_NAME RCM.SBEAMFULL RCM.POLARIZATION RCM.SPECIAL_HANDLING_REQUIRED_R CATALOG_IMAGE.START_DATETIME RELATED_PRODUCTS RCM.SPECIAL_HANDLING_INSTRUCTIONS Metadata RCM.DOWNLINK_SEGMENT_ID If you want more fields returned, you can create a list and add Field IDs (found in the 'results' entry of the get_availableFields method results, in bold below) of fields you'd like included in the results JSON. >>> print(rapi.get_availableFields('RCMImageProducts')) {'search': { [...] }, 'results': { 'Buyer Id': {'id': ' ARCHIVE_IMAGE.AGENCY_BUYER ', 'datatype': 'Integer'}, [...] } } NOTE : The result fields parameter is not necessary if you use the 'full' option when getting the results after the search; see Get Results for more information. For example, the following will include the Processing Facility and Look Orientation of the images: >>> result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION'] Submit Search Now submit the search, in this example, setting the Collection ID to 'RCMImageProducts' and max results to 100: >>> rapi.search(\"RCMImageProducts\", filters=filters, features=feats, dates=dates, resultFields=result_fields, maxResults=100) Get Results Before getting the results, set the field type to return: camel (default): All field names will be in lower camelcase (ex: fieldName) upper : Field names will be in upper case with underscore for spaces (ex: FIELD_NAME) words : Field names will be English words (ex: Field Name) >>> rapi.set_fieldConvention('upper') NOTE : Changing the field name convention does not apply when using the 'raw' parameter for the get_results method. Now to get the results of your search using the get_results method. There are three options for getting results: raw (default): The raw JSON data results from the RAPI. Only the basic fields and the fields you specified in the result_fields will be returned. >>> print(rapi.get_results('raw')) [ { \"recordId\": \"7822244\", \"overviewUrl\": \"http://was-eodms.compusult.net/wes/images/No_Data_Available.png\", \"collectionId\": \"RCMImageProducts\", \"metadata2\": [ { \"id\": \"RCM.ANTENNA_ORIENTATION\", \"value\": \"Right\", \"label\": \"Look Orientation\" }, { \"id\": \"ARCHIVE_IMAGE.PROCESSING_DATETIME\", \"value\": \"2020-11-09 13:49:14 GMT\", \"label\": \"Processing Date\" }, { \"id\": \"ARCHIVE_IMAGE.PRODUCT_TYPE\", \"value\": \"GRD\", \"label\": \"Type\" }, [...] ], \"rapiOrderUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/rapi/order/direct?collection=RCMImageProducts&recordId=7822244&destination=fill_me_in\", \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -111.2061013084167, 62.4209316874871 ], [ -111.2710554014949, 62.22606212562155 ], [ -110.6882156023417, 62.18309404584561 ], [ -110.6194709629304, 62.3778734605923 ], [ -111.2061013084167, 62.4209316874871 ] ] ] }, \"title\": \"RCM2_OK1370026_PK1375301_3_16M17_20201109_134014_HH_HV_GRD\", \"orderExecuteUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/Client/?entryPoint=preview#?cseq=RCMImageProducts&record=7822244\", \"thumbnailUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/getObject?FeatureID=62f0e816-8006-4768-8f32-6ef4008e6895-7822244&ObjectType=Thumbview&collectionId=RCMImageProducts\", \"metadataUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/Client/?entryPoint=resultDetails&resultId=7822244&collectionId=RCMImageProducts\", \"isGeorectified\": \"False\", \"collectionTitle\": \"RCM Image Products\", \"isOrderable\": \"True\", \"thisRecordUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/rapi/record/RCMImageProducts/7822244\", \"metadata\": [ [ \"Look Orientation\", \"Right\" ], [...] ] }, [...] ] full : The full metadata for each image in the results from the RAPI. NOTE : When running the get_results function for the first time, the 'full' option will require calls to the RAPI to fetch all the metadata for each image. This can take time depending on the number of images returned from the search. The following example is the output from the 'full' results returned from the RAPI when using the 'upper' field name convention: >>> print(rapi.get_results('full')) | EODMSRAPI | Fetching result metadata: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 29/29 [00:07<00:00, 3.81item/s] [ { \"RECORD_ID\": \"8572605\", \"COLLECTION_ID\": \"RCMImageProducts\", \"GEOMETRY\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -75.87136946742638, 45.53642826726489 ], [ -75.88537895138599, 45.47880111111606 ], [ -75.63233378406722, 45.44847937835439 ], [ -75.61805821213746, 45.50610429149886 ], [ -75.87136946742638, 45.53642826726489 ] ] ] }, \"TITLE\": \"rcm_20210407_N4549W07575\", \"COLLECTION_TITLE\": \"RCM Image Products\", \"IS_ORDERABLE\": true, \"THIS_RECORD_URL\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/rapi/record/RCMImageProducts/8572605\", \"ABSOLUTE_ORBIT\": \"9917.0\", \"ACQUISITION_END_DATE\": \"2021-04-07 11:12:05 GMT\", \"ACQUISITION_START_DATE\": \"2021-04-07 11:12:04 GMT\", \"ARCHIVE_VISIBILITY_START_DATE\": \"2021-04-07 11:12:04 GMT\", \"BEAM_MNEMONIC\": \"FSL22\", \"BEAM_MODE_DEFINITION_ID\": \"422\", [...] \"VISIBILITY_RESTRICTION_EXPIRY_DATE\": \"2021-04-07 11:12:06 GMT\", \"WITHIN_ORBIT_TUBE\": \"true\", \"WKT_GEOMETRY\": \"POLYGON ((-75.8713694674264 45.5364282672649 0,-75.885378951386 45.4788011111161 0,-75.6323337840672 45.4484793783544 0,-75.6180582121375 45.5061042914989 0,-75.8713694674264 45.5364282672649 0))\" }, [...] ] geojson : The results will be returned in GeoJSON format. NOTE : When running the get_results function for the first time, the 'geojson' option will require calls to the RAPI to fetch all the metadata for each image. This can take time depending on the number of images returned from the search. The following example is the output from the 'geojson' results returned from the RAPI when using the 'upper' field name convention: >>> print(rapi.get_results('geojson')) | EODMSRAPI | Fetching result metadata: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 29/29 [00:07<00:00, 3.86item/s] { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -75.87136946742638, 45.53642826726489 ], [ -75.88537895138599, 45.47880111111606 ], [ -75.63233378406722, 45.44847937835439 ], [ -75.61805821213746, 45.50610429149886 ], [ -75.87136946742638, 45.53642826726489 ] ] ] }, \"properties\": { \"RECORD_ID\": \"8572605\", \"COLLECTION_ID\": \"RCMImageProducts\", \"GEOMETRY\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -75.87136946742638, 45.53642826726489 ], [ -75.88537895138599, 45.47880111111606 ], [ -75.63233378406722, 45.44847937835439 ], [ -75.61805821213746, 45.50610429149886 ], [ -75.87136946742638, 45.53642826726489 ] ] ] }, [...] \"VISIBILITY_RESTRICTION_EXPIRY_DATE\": \"2021-04-07 11:12:06 GMT\", \"WITHIN_ORBIT_TUBE\": \"true\", \"WKT_GEOMETRY\": \"POLYGON ((-75.8713694674264 45.5364282672649 0,-75.885378951386 45.4788011111161 0,-75.6323337840672 45.4484793783544 0,-75.6180582121375 45.5061042914989 0,-75.8713694674264 45.5364282672649 0))\" } }, [...] ] } >>> res = rapi.get_results('full') Print Results The EODMSRAPI has a print_results function which will print the results in pretty print. You can pass a specific results from the RAPI to the function. If not, the 'full' results will be printed. NOTE: If you haven't run get_results prior to print_results , the EODMSRAPI will first fetch the full metadata which can some time depending on the number of results. >>> rapi.print_results() NOTE: In Linux, if you get the error UnicodeEncodeError: 'ascii' codec can't encode character... , add export LC_CTYPE=en_US.UTF-8 to the \"~/.bashrc\" file and run source ~/.bashrc . Full Search Code Example from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Set features using the easternmost and westernmost points of Canada in WKT format feats = [('intersects', 'POINT (-141.001944 60.306389)'), \\ ('intersects', 'POINT (-52.619444 47.523611)')] # Set date ranges dates = [{\"start\": \"20190101_000000\", \"end\": \"20190915_153555\"}, {\"start\": \"20201013_120000\", \"end\": \"20201113_150000\"}] # Set search filters filters = {'Beam Mnemonic': ('like', 'SC50%'), \\ 'Incidence Angle': ('<=', '45')} # Set the results fields result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION'] # Submit search rapi.search(\"RCMImageProducts\", filters, feats, dates, result_fields, 100) # Get results rapi.set_fieldConvention('upper') res = rapi.get_results('full') rapi.print_results(res)","title":"Submit an Image Search"},{"location":"search-rapi/#submit-an-image-search","text":"You can perform a search on the RAPI using the search method of the EODMSRAPI. However, before submitting a search, you'll have to create the items used to filter the results. The search function requires a Collection name and optional filters , geometry features , dates , result fields and maximum results values.","title":"Submit an Image Search"},{"location":"search-rapi/#collection","text":"The Collection ID has to be specified when submitting a search. To get a list of Collection IDs, use: >>> print(rapi.get_collections(as_list=True)) | EODMSRAPI | Getting Collection information, please wait... ['NAPL', 'SGBAirPhotos', 'RCMImageProducts', 'COSMO-SkyMed1', 'Radarsat1', 'Radarsat1RawProducts', 'Radarsat2', 'Radarsat2RawProducts', 'RCMScienceData', 'TerraSarX', 'DMC', 'Gaofen-1', 'GeoEye-1', 'IKONOS', 'IRS', 'PlanetScope', 'QuickBird-2', 'RapidEye', 'SPOT', 'WorldView-1', 'WorldView-2', 'WorldView-3', 'VASP']","title":"Collection"},{"location":"search-rapi/#geometry-features","text":"The geometry features are a list of tuples with each tuple containing an operator and a specified geometry ( [(<operator>, <geometry>), ...] ). The operator can be contains , contained by , crosses , disjoint with , intersects , overlaps , touches , and within NOTE: The operator is not case sensitive. However, the geometry value(s) should follow the proper formatting and cases for their type (i.e. follow the proper formatting for GeoJSON, WKT, etc.). The geometry can be: Type Info Example A filename can be a ESRI Shapefile, KML, GML or GeoJSON can contain points, lines or polygons and have multiple features feats = [ ('contains', 'C:\\\\TEMP\\\\test.geojson') ] WKT format can be a point, line or polygon feats = [ ('intersects', 'POINT (-75.92790414335645721 45.63414106580390239)'), ('intersects', 'POINT (-76.04462125987681986 46.23234274318053849)') ] GeoJSON the 'geometry' entry from a GeoJSON Feature can be a point, line or polygon feats = [ ('within', { \"type\":\"Polygon\", \"coordinates\":[[[-75.71484393257714,45.407703298380106], [-75.6962772564671,45.40738537380734],[-75.69343667852566,45.39264326981817], [-75.71826085966613,45.390764097853655],[-75.71484393257714,45.407703298380106]]] }) ] Coordinates a list of coordinates of a polygon (ex: [(x1, y1), (x2, y2), ...] ) a single point (ex: [(x1, y1)] ) feats = [ ('contains', [ (-75.71, 45.41), (-75.70, 45.41), (-75.69, 45.39), (-75.72, 45.39), (-75.71, 45.41) ] ) ] NOTE : The GDAL Python package is required if you wish to use shapefiles. WKT example to get results for the easternmost and westernmost points of Canada: >>> feats = [('intersects', 'POINT (-141.001944 60.306389)'), ('intersects', 'POINT (-52.619444 47.523611)')]","title":"Geometry Features"},{"location":"search-rapi/#date-ranges","text":"The date range is a list of date range dictionaries containing a start and end key. The date values should be in format YYYYMMDD_HHMMSS . For example, to search for images between January 1, 2019 at midnight to September 15, 2019 at 3:35:55 PM and between October 13, 2020 at 12 noon to November 13, 2020 at 3pm, use: >>> dates = [{\"start\": \"20190101_000000\", \"end\": \"20190915_153555\"}, {\"start\": \"20201013_120000\", \"end\": \"20201113_150000\"}]","title":"Date Range(s)"},{"location":"search-rapi/#query-filters","text":"The query variable is a dictionary containing filter titles as keys and tuples with the operator and filter value such as: {<field>: (<operator>, <value(s)>), ...} Example of beam mnemonic filter: {'Beam Mnemonic': ('like', ['16M%', '3M11'])} The operator can be one of the following: = , < , > , <> , <= , >= , like , starts with , ends with , or contains . NOTE: The operator is not case sensitive. However, fields and values are case sensitive. The following example will search for images with Beam Mnemonic that equals '3M11' or contains '16M' and with Incidence Angle greater than or equal to 45 degrees: >>> filters = {'Beam Mnemonic': ('like', 'SC50%'), 'Incidence Angle': ('<=', '45')}","title":"Query Filter(s)"},{"location":"search-rapi/#get-available-fields","text":"You can get a list of available query fields using the get_availableFields and passing the Collection ID . There are 3 ways to get the available fields for a Collection using the name_type argument of the get_availableFields function: Value Description Results empty Gets the raw field information from the RAPI. print(rapi.get_availableFields('RCMImageProducts')) {'search': { 'Special Handling Required': {'id': 'RCM.SPECIAL_HANDLING_REQUIRED', 'datatype': 'String'}, 'Client Order Number': {'id': 'ARCHIVE_IMAGE.CLIENT_ORDER_NUMBER', 'datatype': 'String'}, ...} }, 'results': { 'Buyer Id': {'id': 'ARCHIVE_IMAGE.AGENCY_BUYER', 'datatype': 'Integer'}, 'Archive Visibility Start Date': {'id': 'ARCHIVE_IMAGE.ARCH_VISIBILITY_START', 'datatype': 'Date'}, ...} } } id Gets a list of field IDs. print(rapi.get_availableFields('RCMImageProducts', name_type='id')) {'search': [ 'RCM.SPECIAL_HANDLING_REQUIRED', 'ARCHIVE_IMAGE.CLIENT_ORDER_NUMBER', ...], 'results': [ 'ARCHIVE_IMAGE.AGENCY_BUYER', 'ARCHIVE_IMAGE.ARCH_VISIBILITY_START', ...] } title Gets a list of field names (these are used when performing a search using the EODMSRAPI). print(rapi.get_availableFields('RCMImageProducts', name_type='title')) {'search': [ 'Special Handling Required', 'Client Order Number', ...], 'results': [ 'Buyer Id', 'Archive Visibility Start Date', ...] }","title":"Get Available Fields"},{"location":"search-rapi/#get-available-field-choices","text":"Some fields have specific choices that the user can enter. These values are included in the get_availableFields empty results, however the function get_fieldChoices in the EODMSRAPI offers results easier to manipulate. The get_fieldChoices function requires a Collection ID and an optional field name or ID. If no field is specified, all fields and choices for the specified Collection will be returned. Example of choices for the Polarization field in RCM: >>> rapi.get_fieldChoices('RCMImageProducts', 'Polarization') ['CH CV', 'HH', 'HH HV', 'HH HV VH VV', 'HH VV', 'HV', 'VH', 'VH VV', 'VV']","title":"Get Available Field Choices"},{"location":"search-rapi/#result-fields","text":"The next value to set is the result fields . The raw JSON results from the RAPI returns only a select few fields. For example, when searching RCM images, the RAPI only returns metadata for these Field IDs: RCM.ORBIT_REL ARCHIVE_IMAGE.PROCESSING_DATETIME ARCHIVE_IMAGE.PRODUCT_TYPE IDX_SENSOR.SENSOR_NAME RCM.SBEAMFULL RCM.POLARIZATION RCM.SPECIAL_HANDLING_REQUIRED_R CATALOG_IMAGE.START_DATETIME RELATED_PRODUCTS RCM.SPECIAL_HANDLING_INSTRUCTIONS Metadata RCM.DOWNLINK_SEGMENT_ID If you want more fields returned, you can create a list and add Field IDs (found in the 'results' entry of the get_availableFields method results, in bold below) of fields you'd like included in the results JSON. >>> print(rapi.get_availableFields('RCMImageProducts')) {'search': { [...] }, 'results': { 'Buyer Id': {'id': ' ARCHIVE_IMAGE.AGENCY_BUYER ', 'datatype': 'Integer'}, [...] } } NOTE : The result fields parameter is not necessary if you use the 'full' option when getting the results after the search; see Get Results for more information. For example, the following will include the Processing Facility and Look Orientation of the images: >>> result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION']","title":"Result Fields"},{"location":"search-rapi/#submit-search","text":"Now submit the search, in this example, setting the Collection ID to 'RCMImageProducts' and max results to 100: >>> rapi.search(\"RCMImageProducts\", filters=filters, features=feats, dates=dates, resultFields=result_fields, maxResults=100)","title":"Submit Search"},{"location":"search-rapi/#get-results","text":"Before getting the results, set the field type to return: camel (default): All field names will be in lower camelcase (ex: fieldName) upper : Field names will be in upper case with underscore for spaces (ex: FIELD_NAME) words : Field names will be English words (ex: Field Name) >>> rapi.set_fieldConvention('upper') NOTE : Changing the field name convention does not apply when using the 'raw' parameter for the get_results method. Now to get the results of your search using the get_results method. There are three options for getting results: raw (default): The raw JSON data results from the RAPI. Only the basic fields and the fields you specified in the result_fields will be returned. >>> print(rapi.get_results('raw')) [ { \"recordId\": \"7822244\", \"overviewUrl\": \"http://was-eodms.compusult.net/wes/images/No_Data_Available.png\", \"collectionId\": \"RCMImageProducts\", \"metadata2\": [ { \"id\": \"RCM.ANTENNA_ORIENTATION\", \"value\": \"Right\", \"label\": \"Look Orientation\" }, { \"id\": \"ARCHIVE_IMAGE.PROCESSING_DATETIME\", \"value\": \"2020-11-09 13:49:14 GMT\", \"label\": \"Processing Date\" }, { \"id\": \"ARCHIVE_IMAGE.PRODUCT_TYPE\", \"value\": \"GRD\", \"label\": \"Type\" }, [...] ], \"rapiOrderUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/rapi/order/direct?collection=RCMImageProducts&recordId=7822244&destination=fill_me_in\", \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -111.2061013084167, 62.4209316874871 ], [ -111.2710554014949, 62.22606212562155 ], [ -110.6882156023417, 62.18309404584561 ], [ -110.6194709629304, 62.3778734605923 ], [ -111.2061013084167, 62.4209316874871 ] ] ] }, \"title\": \"RCM2_OK1370026_PK1375301_3_16M17_20201109_134014_HH_HV_GRD\", \"orderExecuteUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/Client/?entryPoint=preview#?cseq=RCMImageProducts&record=7822244\", \"thumbnailUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/getObject?FeatureID=62f0e816-8006-4768-8f32-6ef4008e6895-7822244&ObjectType=Thumbview&collectionId=RCMImageProducts\", \"metadataUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/Client/?entryPoint=resultDetails&resultId=7822244&collectionId=RCMImageProducts\", \"isGeorectified\": \"False\", \"collectionTitle\": \"RCM Image Products\", \"isOrderable\": \"True\", \"thisRecordUrl\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/rapi/record/RCMImageProducts/7822244\", \"metadata\": [ [ \"Look Orientation\", \"Right\" ], [...] ] }, [...] ] full : The full metadata for each image in the results from the RAPI. NOTE : When running the get_results function for the first time, the 'full' option will require calls to the RAPI to fetch all the metadata for each image. This can take time depending on the number of images returned from the search. The following example is the output from the 'full' results returned from the RAPI when using the 'upper' field name convention: >>> print(rapi.get_results('full')) | EODMSRAPI | Fetching result metadata: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 29/29 [00:07<00:00, 3.81item/s] [ { \"RECORD_ID\": \"8572605\", \"COLLECTION_ID\": \"RCMImageProducts\", \"GEOMETRY\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -75.87136946742638, 45.53642826726489 ], [ -75.88537895138599, 45.47880111111606 ], [ -75.63233378406722, 45.44847937835439 ], [ -75.61805821213746, 45.50610429149886 ], [ -75.87136946742638, 45.53642826726489 ] ] ] }, \"TITLE\": \"rcm_20210407_N4549W07575\", \"COLLECTION_TITLE\": \"RCM Image Products\", \"IS_ORDERABLE\": true, \"THIS_RECORD_URL\": \"https://www.eodms-sgdot.nrcan-rncan.gc.ca/wes/rapi/record/RCMImageProducts/8572605\", \"ABSOLUTE_ORBIT\": \"9917.0\", \"ACQUISITION_END_DATE\": \"2021-04-07 11:12:05 GMT\", \"ACQUISITION_START_DATE\": \"2021-04-07 11:12:04 GMT\", \"ARCHIVE_VISIBILITY_START_DATE\": \"2021-04-07 11:12:04 GMT\", \"BEAM_MNEMONIC\": \"FSL22\", \"BEAM_MODE_DEFINITION_ID\": \"422\", [...] \"VISIBILITY_RESTRICTION_EXPIRY_DATE\": \"2021-04-07 11:12:06 GMT\", \"WITHIN_ORBIT_TUBE\": \"true\", \"WKT_GEOMETRY\": \"POLYGON ((-75.8713694674264 45.5364282672649 0,-75.885378951386 45.4788011111161 0,-75.6323337840672 45.4484793783544 0,-75.6180582121375 45.5061042914989 0,-75.8713694674264 45.5364282672649 0))\" }, [...] ] geojson : The results will be returned in GeoJSON format. NOTE : When running the get_results function for the first time, the 'geojson' option will require calls to the RAPI to fetch all the metadata for each image. This can take time depending on the number of images returned from the search. The following example is the output from the 'geojson' results returned from the RAPI when using the 'upper' field name convention: >>> print(rapi.get_results('geojson')) | EODMSRAPI | Fetching result metadata: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 29/29 [00:07<00:00, 3.86item/s] { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -75.87136946742638, 45.53642826726489 ], [ -75.88537895138599, 45.47880111111606 ], [ -75.63233378406722, 45.44847937835439 ], [ -75.61805821213746, 45.50610429149886 ], [ -75.87136946742638, 45.53642826726489 ] ] ] }, \"properties\": { \"RECORD_ID\": \"8572605\", \"COLLECTION_ID\": \"RCMImageProducts\", \"GEOMETRY\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -75.87136946742638, 45.53642826726489 ], [ -75.88537895138599, 45.47880111111606 ], [ -75.63233378406722, 45.44847937835439 ], [ -75.61805821213746, 45.50610429149886 ], [ -75.87136946742638, 45.53642826726489 ] ] ] }, [...] \"VISIBILITY_RESTRICTION_EXPIRY_DATE\": \"2021-04-07 11:12:06 GMT\", \"WITHIN_ORBIT_TUBE\": \"true\", \"WKT_GEOMETRY\": \"POLYGON ((-75.8713694674264 45.5364282672649 0,-75.885378951386 45.4788011111161 0,-75.6323337840672 45.4484793783544 0,-75.6180582121375 45.5061042914989 0,-75.8713694674264 45.5364282672649 0))\" } }, [...] ] } >>> res = rapi.get_results('full')","title":"Get Results"},{"location":"search-rapi/#print-results","text":"The EODMSRAPI has a print_results function which will print the results in pretty print. You can pass a specific results from the RAPI to the function. If not, the 'full' results will be printed. NOTE: If you haven't run get_results prior to print_results , the EODMSRAPI will first fetch the full metadata which can some time depending on the number of results. >>> rapi.print_results() NOTE: In Linux, if you get the error UnicodeEncodeError: 'ascii' codec can't encode character... , add export LC_CTYPE=en_US.UTF-8 to the \"~/.bashrc\" file and run source ~/.bashrc .","title":"Print Results"},{"location":"search-rapi/#full-search-code-example","text":"from eodms_rapi import EODMSRAPI # Initialize EODMSRAPI using your EODMS account credentials rapi = EODMSRAPI('eodms-username', 'eodms-password') # Set features using the easternmost and westernmost points of Canada in WKT format feats = [('intersects', 'POINT (-141.001944 60.306389)'), \\ ('intersects', 'POINT (-52.619444 47.523611)')] # Set date ranges dates = [{\"start\": \"20190101_000000\", \"end\": \"20190915_153555\"}, {\"start\": \"20201013_120000\", \"end\": \"20201113_150000\"}] # Set search filters filters = {'Beam Mnemonic': ('like', 'SC50%'), \\ 'Incidence Angle': ('<=', '45')} # Set the results fields result_fields = ['ARCHIVE_RCM.PROCESSING_FACILITY', 'RCM.ANTENNA_ORIENTATION'] # Submit search rapi.search(\"RCMImageProducts\", filters, feats, dates, result_fields, 100) # Get results rapi.set_fieldConvention('upper') res = rapi.get_results('full') rapi.print_results(res)","title":"Full Search Code Example"},{"location":"api/","text":"Welcome to py-eodms-rapi\u2019s documentation! Indices and tables Index Module Index Search Page","title":"Index"},{"location":"api/#welcome-to-py-eodms-rapis-documentation","text":"","title":"Welcome to py-eodms-rapi\u2019s documentation!"},{"location":"api/#indices-and-tables","text":"Index Module Index Search Page","title":"Indices and tables"},{"location":"api/source/eodms_rapi/","text":"eodms_rapi package eodms_rapi.eodms module class eodms_rapi.eodms.EODMSRAPI(username, password) Bases: object download(items, dest, wait=10.0) Downloads a list of order items from the EODMS RAPI. Parameters items ( list or dict ) \u2013 A list of order items returned from the RAPI. Example: {'items': [ {'recordId': '8023427', 'status': 'SUBMITTED', 'collectionId': 'RCMImageProducts', 'itemId': '346204', 'orderId': '50975'}, ... ] } or [ {'recordId': '8023427', 'status': 'SUBMITTED', 'collectionId': 'RCMImageProducts', 'itemId': '346204', 'orderId': '50975'}, ... ] dest ( str ) \u2013 The local download folder location. wait ( float or int ) \u2013 Sets the time to wait before checking the status of all orders. get_availableFields(collection=None, name_type='title') Gets a dictionary of available fields for a collection from the RAPI. Parameters collection ( str ) \u2013 The Collection ID. Returns A dictionary containing the available fields for the given collection. Return type dict get_collections(as_list=False, titles=False, redo=False) Gets a list of available collections for the current user. Parameters as_list ( bool ) \u2013 Determines the type of return. If False, a dictionary will be returned. If True, only a list of collection IDs will be returned. Returns Either a dictionary of collections or a list of collection IDs depending on the value of as_list. Return type dict get_order(orderId) Gets an specified order from the EODMS RAPI. Parameters orderId ( str or int ) \u2013 The Order ID of the specific order. Returns A JSON dictionary of the specific order. Return type dict get_orderItem(itemId) Submits a query to the EODMS RAPI to get a specific order item. Parameters itemId ( str or int ) \u2013 The Order Item ID of the image to retrieve from the RAPI. Returns A dictionary containing the JSON format of the results from the RAPI. Return type dict get_orderParameters(collection, recordId) Gets the list of available Order parameters for a given image record. Parameters collection ( str ) \u2013 The Collection ID for the query. recordId ( int or str ) \u2013 The Record ID for the image. Returns A JSON dictionary of the order parameters. Return type dict get_orders(dtstart=None, dtend=None, maxOrders=10000, format='json') Sends a query to retrieve orders from the RAPI. Parameters dtstart ( datetime.datetime ) \u2013 The start date for the date range of the query. dtend ( datetime.datetime ) \u2013 The end date for the date range of the query. maxOrders ( int ) \u2013 The maximum number of orders to retrieve. format ( str ) \u2013 The format of the results. Returns A JSON dictionary of the query results containing the orders. Return type dict get_ordersByRecords(records) Gets a list of orders from the RAPI based on a list of records. Parameters records ( list ) \u2013 A list of records used to get the list of orders. Returns A list of results from the RAPI. Return type list get_results(form='raw') Gets the self.results in a given format Parameters form ( str ) \u2013 The type of format to return. Available options: raw : Returns the JSON results straight from the RAPI. full : Returns a JSON with full metadata information. geojson : Returns a FeatureCollection of the results (requires geojson package). Returns A dictionary of the results from self.results variable. Return type dict order(results, priority='Medium', parameters=None, destinations=[]) Sends an order to EODMS using the RAPI. Parameters results ( list ) \u2013 A list of JSON results from the RAPI. The results list must contain a collectionId key and a recordId key for each image. priority ( str or list ) \u2013 Determines the priority of the order. If you\u2019d like to specify a separate priority for each image, pass a list of dictionaries containing the recordId (matching the IDs in results) and priority , such as: [{\"recordId\": 7627902, \"priority\": \"Low\"}, ...] Priority options: \u201cLow\u201d, \u201cMedium\u201d, \u201cHigh\u201d or \u201cUrgent\u201d parameter ( list ) \u2013 Either a list of parameters or a list of record items. Use the get_orderParameters method to get a list of available parameters. Parameter list : [{\"|internalName|\": \"|value|\"}, ...] Example: [{\"packagingFormat\": \"TARGZ\"}, {\"NOTIFICATION_EMAIL_ADDRESS\": \"kevin.ballantyne@canada.ca\"}, ...] Parameters for each record : [{\"recordId\": |recordId|, \"parameters\": [{\"|internalName|\": \"|value|\"}, ...]}] Example: [{\"recordId\": 7627902, \"parameters\": [{\"packagingFormat\": \"TARGZ\"}, ...]}] remove_orderItem(orderId, itemId) Removes an Order Item from the EODMS using the RAPI. Parameters orderId ( int or str ) \u2013 The Order ID of the Order Item to remove. itemId ( int or str ) \u2013 The Order Item ID of the Order Item to remove. Returns Returns the contents of the Delete request (always empty). Return type byte str search(collection, filters=None, feats=None, dates=None, resultField=[], maxResults=None) Sends a search to the RAPI to search for image results. Parameters collection ( str ) \u2013 The Collection ID for the query. filters ( dict ) \u2013 A dictionary of query filters and values in the following format: {\"|filter title|\": (\"|operator|\", [\"value1\", \"value2\", ...]), ...} Example: {\"Beam Mnemonic\": {'=': []}} feats ( list ) \u2013 A list of tuples containing the operator and filenames or coordinates of features to use in the search. The features can be: a filename (ESRI Shapefile, KML, GML or GeoJSON) a WKT format string the \u2018geometry\u2019 entry from a GeoJSON Feature a list of coordinates (ex: [(x1, y1), (x2, y2), ...] ) dates ( list ) \u2013 A list of date range dictionaries with keys start and end . The values of the start and end can either be a string in format yyyymmdd_hhmmss or a datetime.datetime object. Example: `[{\"start\": \"20201013_120000\", \"end\": \"20201013_150000\"}]` resultField ( str ) \u2013 A name of a field to include in the query results. maxResults ( str or int ) \u2013 The maximum number of results to return from the query. set_attempts(number) Sets number of attempts to be made to the RAPI before the script ends. Parameters number ( int ) \u2013 The value for the number of attempts. set_fieldConvention(convention) Sets the naming convention of the output fields. Parameters convention ( str ) \u2013 The type of naming convention for the fields. words : The label with spaces and words will be returned. camel (default): The format will be lower camel case like \u2018camelCase\u2019. upper : The format will be all uppercase with underscore for spaces. set_orderTimeout(timeout) Sets the timeout limit for an order to the RAPI. Parameters timeout ( float ) \u2013 The value of the timeout in seconds. set_queryTimeout(timeout) Sets the timeout limit for a query to the RAPI. Parameters timeout ( float ) \u2013 The value of the timeout in seconds. class eodms_rapi.eodms.QueryError(msg) Bases: object The QueryError class is used to store error information for a query. eodms_rapi.geo module class eodms_rapi.geo.EODMSGeo(eodmsrapi) Bases: object The Geo class contains all the methods and functions used to perform geographic processes mainly using OGR. add_geom(in_src) Processes the source and converts it for use in the RAPI. Parameters in_src ( str ) \u2013 The in_src can either be: a filename (ESRI Shapefile, KML, GML or GeoJSON) of multiple features a WKT format string of a single feature the \u2018geometry\u2019 entry from a GeoJSON Feature a list of coordinates (ex: [(x1, y1), (x2, y2), ...] ) Returns A string of the WKT of the feature. Return type str convert_coords(coord_lst, geom_type) Converts a list of points to GeoJSON format. Parameters coord_lst ( list ) \u2013 A list of points. geom_type ( str ) \u2013 The type of geometry, either \u2018Point\u2019, \u2018LineString\u2019 or \u2018Polygon\u2019. Returns A dictionary in the GeoJSON format. Return type dict convert_fromWKT(in_feat) Converts a WKT to a GDAL geometry. Parameters in_feat ( str ) \u2013 The WKT of the feature. Returns The polygon geometry of the input WKT. Return type ogr.Geometry convert_imageGeom(coords, output='array') Converts a list of coordinates from the RAPI to a polygon geometry, array of points or as WKT. Parameters coords ( list ) \u2013 A list of coordinates from the RAPI results. output ( str ) \u2013 The type of return, can be \u2018array\u2019, \u2018wkt\u2019 or \u2018geom\u2019. Returns Either a polygon geometry, WKT or array of points. Return type multiple types convert_toGeoJSON(results) Converts a get of RAPI results to GeoJSON geometries. Parameters results ( list ) \u2013 A list of results from the RAPI. Returns A dictionary of a GeoJSON FeatureCollection. Return type dict convert_toWKT(in_feat, in_type) Converts a feature into WKT format. Parameters in_feat ( dict or list ) \u2013 The input feature, either as a GeoJSON dictionary or list of points. Returns The input feature converted to WKT. Return type str get_features(in_src) Extracts the features from an AOI file. Parameters in_src ( str ) \u2013 The input filename of the AOI file. Can either be a GML, KML, GeoJSON, or Shapefile. Returns The AOI in WKT format. Return type str Module contents","title":"eodms_rapi package"},{"location":"api/source/eodms_rapi/#eodms_rapi-package","text":"","title":"eodms_rapi package"},{"location":"api/source/eodms_rapi/#eodms_rapieodms-module","text":"","title":"eodms_rapi.eodms module"},{"location":"api/source/eodms_rapi/#class-eodms_rapieodmseodmsrapiusername-password","text":"Bases: object","title":"class eodms_rapi.eodms.EODMSRAPI(username, password)"},{"location":"api/source/eodms_rapi/#downloaditems-dest-wait100","text":"Downloads a list of order items from the EODMS RAPI. Parameters items ( list or dict ) \u2013 A list of order items returned from the RAPI. Example: {'items': [ {'recordId': '8023427', 'status': 'SUBMITTED', 'collectionId': 'RCMImageProducts', 'itemId': '346204', 'orderId': '50975'}, ... ] } or [ {'recordId': '8023427', 'status': 'SUBMITTED', 'collectionId': 'RCMImageProducts', 'itemId': '346204', 'orderId': '50975'}, ... ] dest ( str ) \u2013 The local download folder location. wait ( float or int ) \u2013 Sets the time to wait before checking the status of all orders.","title":"download(items, dest, wait=10.0)"},{"location":"api/source/eodms_rapi/#get_availablefieldscollectionnone-name_typetitle","text":"Gets a dictionary of available fields for a collection from the RAPI. Parameters collection ( str ) \u2013 The Collection ID. Returns A dictionary containing the available fields for the given collection. Return type dict","title":"get_availableFields(collection=None, name_type='title')"},{"location":"api/source/eodms_rapi/#get_collectionsas_listfalse-titlesfalse-redofalse","text":"Gets a list of available collections for the current user. Parameters as_list ( bool ) \u2013 Determines the type of return. If False, a dictionary will be returned. If True, only a list of collection IDs will be returned. Returns Either a dictionary of collections or a list of collection IDs depending on the value of as_list. Return type dict","title":"get_collections(as_list=False, titles=False, redo=False)"},{"location":"api/source/eodms_rapi/#get_orderorderid","text":"Gets an specified order from the EODMS RAPI. Parameters orderId ( str or int ) \u2013 The Order ID of the specific order. Returns A JSON dictionary of the specific order. Return type dict","title":"get_order(orderId)"},{"location":"api/source/eodms_rapi/#get_orderitemitemid","text":"Submits a query to the EODMS RAPI to get a specific order item. Parameters itemId ( str or int ) \u2013 The Order Item ID of the image to retrieve from the RAPI. Returns A dictionary containing the JSON format of the results from the RAPI. Return type dict","title":"get_orderItem(itemId)"},{"location":"api/source/eodms_rapi/#get_orderparameterscollection-recordid","text":"Gets the list of available Order parameters for a given image record. Parameters collection ( str ) \u2013 The Collection ID for the query. recordId ( int or str ) \u2013 The Record ID for the image. Returns A JSON dictionary of the order parameters. Return type dict","title":"get_orderParameters(collection, recordId)"},{"location":"api/source/eodms_rapi/#get_ordersdtstartnone-dtendnone-maxorders10000-formatjson","text":"Sends a query to retrieve orders from the RAPI. Parameters dtstart ( datetime.datetime ) \u2013 The start date for the date range of the query. dtend ( datetime.datetime ) \u2013 The end date for the date range of the query. maxOrders ( int ) \u2013 The maximum number of orders to retrieve. format ( str ) \u2013 The format of the results. Returns A JSON dictionary of the query results containing the orders. Return type dict","title":"get_orders(dtstart=None, dtend=None, maxOrders=10000, format='json')"},{"location":"api/source/eodms_rapi/#get_ordersbyrecordsrecords","text":"Gets a list of orders from the RAPI based on a list of records. Parameters records ( list ) \u2013 A list of records used to get the list of orders. Returns A list of results from the RAPI. Return type list","title":"get_ordersByRecords(records)"},{"location":"api/source/eodms_rapi/#get_resultsformraw","text":"Gets the self.results in a given format Parameters form ( str ) \u2013 The type of format to return. Available options: raw : Returns the JSON results straight from the RAPI. full : Returns a JSON with full metadata information. geojson : Returns a FeatureCollection of the results (requires geojson package). Returns A dictionary of the results from self.results variable. Return type dict","title":"get_results(form='raw')"},{"location":"api/source/eodms_rapi/#orderresults-prioritymedium-parametersnone-destinations","text":"Sends an order to EODMS using the RAPI. Parameters results ( list ) \u2013 A list of JSON results from the RAPI. The results list must contain a collectionId key and a recordId key for each image. priority ( str or list ) \u2013 Determines the priority of the order. If you\u2019d like to specify a separate priority for each image, pass a list of dictionaries containing the recordId (matching the IDs in results) and priority , such as: [{\"recordId\": 7627902, \"priority\": \"Low\"}, ...] Priority options: \u201cLow\u201d, \u201cMedium\u201d, \u201cHigh\u201d or \u201cUrgent\u201d parameter ( list ) \u2013 Either a list of parameters or a list of record items. Use the get_orderParameters method to get a list of available parameters. Parameter list : [{\"|internalName|\": \"|value|\"}, ...] Example: [{\"packagingFormat\": \"TARGZ\"}, {\"NOTIFICATION_EMAIL_ADDRESS\": \"kevin.ballantyne@canada.ca\"}, ...] Parameters for each record : [{\"recordId\": |recordId|, \"parameters\": [{\"|internalName|\": \"|value|\"}, ...]}] Example: [{\"recordId\": 7627902, \"parameters\": [{\"packagingFormat\": \"TARGZ\"}, ...]}]","title":"order(results, priority='Medium', parameters=None, destinations=[])"},{"location":"api/source/eodms_rapi/#remove_orderitemorderid-itemid","text":"Removes an Order Item from the EODMS using the RAPI. Parameters orderId ( int or str ) \u2013 The Order ID of the Order Item to remove. itemId ( int or str ) \u2013 The Order Item ID of the Order Item to remove. Returns Returns the contents of the Delete request (always empty). Return type byte str","title":"remove_orderItem(orderId, itemId)"},{"location":"api/source/eodms_rapi/#searchcollection-filtersnone-featsnone-datesnone-resultfield-maxresultsnone","text":"Sends a search to the RAPI to search for image results. Parameters collection ( str ) \u2013 The Collection ID for the query. filters ( dict ) \u2013 A dictionary of query filters and values in the following format: {\"|filter title|\": (\"|operator|\", [\"value1\", \"value2\", ...]), ...} Example: {\"Beam Mnemonic\": {'=': []}} feats ( list ) \u2013 A list of tuples containing the operator and filenames or coordinates of features to use in the search. The features can be: a filename (ESRI Shapefile, KML, GML or GeoJSON) a WKT format string the \u2018geometry\u2019 entry from a GeoJSON Feature a list of coordinates (ex: [(x1, y1), (x2, y2), ...] ) dates ( list ) \u2013 A list of date range dictionaries with keys start and end . The values of the start and end can either be a string in format yyyymmdd_hhmmss or a datetime.datetime object. Example: `[{\"start\": \"20201013_120000\", \"end\": \"20201013_150000\"}]` resultField ( str ) \u2013 A name of a field to include in the query results. maxResults ( str or int ) \u2013 The maximum number of results to return from the query.","title":"search(collection, filters=None, feats=None, dates=None, resultField=[], maxResults=None)"},{"location":"api/source/eodms_rapi/#set_attemptsnumber","text":"Sets number of attempts to be made to the RAPI before the script ends. Parameters number ( int ) \u2013 The value for the number of attempts.","title":"set_attempts(number)"},{"location":"api/source/eodms_rapi/#set_fieldconventionconvention","text":"Sets the naming convention of the output fields. Parameters convention ( str ) \u2013 The type of naming convention for the fields. words : The label with spaces and words will be returned. camel (default): The format will be lower camel case like \u2018camelCase\u2019. upper : The format will be all uppercase with underscore for spaces.","title":"set_fieldConvention(convention)"},{"location":"api/source/eodms_rapi/#set_ordertimeouttimeout","text":"Sets the timeout limit for an order to the RAPI. Parameters timeout ( float ) \u2013 The value of the timeout in seconds.","title":"set_orderTimeout(timeout)"},{"location":"api/source/eodms_rapi/#set_querytimeouttimeout","text":"Sets the timeout limit for a query to the RAPI. Parameters timeout ( float ) \u2013 The value of the timeout in seconds.","title":"set_queryTimeout(timeout)"},{"location":"api/source/eodms_rapi/#class-eodms_rapieodmsqueryerrormsg","text":"Bases: object The QueryError class is used to store error information for a query.","title":"class eodms_rapi.eodms.QueryError(msg)"},{"location":"api/source/eodms_rapi/#eodms_rapigeo-module","text":"","title":"eodms_rapi.geo module"},{"location":"api/source/eodms_rapi/#class-eodms_rapigeoeodmsgeoeodmsrapi","text":"Bases: object The Geo class contains all the methods and functions used to perform geographic processes mainly using OGR.","title":"class eodms_rapi.geo.EODMSGeo(eodmsrapi)"},{"location":"api/source/eodms_rapi/#add_geomin_src","text":"Processes the source and converts it for use in the RAPI. Parameters in_src ( str ) \u2013 The in_src can either be: a filename (ESRI Shapefile, KML, GML or GeoJSON) of multiple features a WKT format string of a single feature the \u2018geometry\u2019 entry from a GeoJSON Feature a list of coordinates (ex: [(x1, y1), (x2, y2), ...] ) Returns A string of the WKT of the feature. Return type str","title":"add_geom(in_src)"},{"location":"api/source/eodms_rapi/#convert_coordscoord_lst-geom_type","text":"Converts a list of points to GeoJSON format. Parameters coord_lst ( list ) \u2013 A list of points. geom_type ( str ) \u2013 The type of geometry, either \u2018Point\u2019, \u2018LineString\u2019 or \u2018Polygon\u2019. Returns A dictionary in the GeoJSON format. Return type dict","title":"convert_coords(coord_lst, geom_type)"},{"location":"api/source/eodms_rapi/#convert_fromwktin_feat","text":"Converts a WKT to a GDAL geometry. Parameters in_feat ( str ) \u2013 The WKT of the feature. Returns The polygon geometry of the input WKT. Return type ogr.Geometry","title":"convert_fromWKT(in_feat)"},{"location":"api/source/eodms_rapi/#convert_imagegeomcoords-outputarray","text":"Converts a list of coordinates from the RAPI to a polygon geometry, array of points or as WKT. Parameters coords ( list ) \u2013 A list of coordinates from the RAPI results. output ( str ) \u2013 The type of return, can be \u2018array\u2019, \u2018wkt\u2019 or \u2018geom\u2019. Returns Either a polygon geometry, WKT or array of points. Return type multiple types","title":"convert_imageGeom(coords, output='array')"},{"location":"api/source/eodms_rapi/#convert_togeojsonresults","text":"Converts a get of RAPI results to GeoJSON geometries. Parameters results ( list ) \u2013 A list of results from the RAPI. Returns A dictionary of a GeoJSON FeatureCollection. Return type dict","title":"convert_toGeoJSON(results)"},{"location":"api/source/eodms_rapi/#convert_towktin_feat-in_type","text":"Converts a feature into WKT format. Parameters in_feat ( dict or list ) \u2013 The input feature, either as a GeoJSON dictionary or list of points. Returns The input feature converted to WKT. Return type str","title":"convert_toWKT(in_feat, in_type)"},{"location":"api/source/eodms_rapi/#get_featuresin_src","text":"Extracts the features from an AOI file. Parameters in_src ( str ) \u2013 The input filename of the AOI file. Can either be a GML, KML, GeoJSON, or Shapefile. Returns The AOI in WKT format. Return type str","title":"get_features(in_src)"},{"location":"api/source/eodms_rapi/#module-contents","text":"","title":"Module contents"},{"location":"api/source/modules/","text":"eodms_rapi eodms_rapi package Submodules eodms_rapi.eodms module eodms_rapi.geo module Module contents","title":"eodms_rapi"},{"location":"api/source/modules/#eodms_rapi","text":"eodms_rapi package Submodules eodms_rapi.eodms module eodms_rapi.geo module Module contents","title":"eodms_rapi"}]}